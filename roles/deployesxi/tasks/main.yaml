- name: Create temp directory for iso extraction
  ansible.builtin.file:
    path: "/tmp/isoextract/KS"
    state: directory
    mode: "755"
  delegate_to: localhost

- name: Create temp directory for the finished isos
  ansible.builtin.file:
    path: "/tmp/isofinished"
    state: directory
    mode: "755"
  delegate_to: localhost

- name: Extract ESXi ISO
  ansible.builtin.command: "xorriso -osirrox on -indev {{ nested_info_global.iso_location }} -extract / /tmp/isoextract"
  changed_when: false
  delegate_to: localhost

- name: Add write permission to extracted files
  ansible.builtin.file:
    path: "/tmp/isoextract"
    state: directory
    recurse: true
    mode: u+w
  delegate_to: localhost

- name: Edit BOOT.CFG to inject the KS.CFG file
  ansible.builtin.replace:
    dest: "{{ item }}"
    regexp: 'kernelopt=.*'
    replace: 'kernelopt=runweasel ks=cdrom:/KS/KS.CFG'
  delegate_to: localhost
  loop:
    - "/tmp/isoextract/BOOT.CFG"
    - "/tmp/isoextract/EFI/BOOT/BOOT.CFG"

- name: Create kickstart file for each nested ESXi host
  ansible.builtin.template:
    src: "ks.j2"
    dest: "/tmp/isoextract/KS/KS.CFG"
    mode: "666"
  delegate_to: localhost

- name: Create custom ESXi ISO for each nested ESXi host
  ansible.builtin.command: "xorrisofs -relaxed-filenames -J -R -o /tmp/isofinished/{{ nested_info.name }}.iso \
                          -b ISOLINUX.BIN -c BOOT.CAT -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e EFIBOOT.IMG -no-emul-boot /tmp/isoextract/"
  args:
    chdir: "/tmp/isoextract/"
  delegate_to: localhost

- name: Upload the ESXi ISO to the datastore
  community.vmware.vsphere_copy:
    hostname: "{{ physical_esxi_info.esxi_host }}"
    username: "{{ physical_esxi_info.esxi_username }}"
    password: "{{ physical_esxi_info.esxi_password }}"
    validate_certs: false
    datacenter: ha-datacenter
    src: "/tmp/isofinished/{{ nested_info.name }}.iso"
    datastore: "{{ physical_esxi_info.datastore_name }}"
    path: "ISOs/{{ nested_info.name }}.iso"
  delegate_to: localhost

- set_fact:
    networklist: |-
      [
      {% for nw in nested_info_global.networks %}
         {
           "name": "{{ nw.name }}",
           "state": "new"
         },
      {% endfor %}
      ]

- name: Deploy nested ESXi host
  community.vmware.vmware_guest:
    hostname: "{{ physical_esxi_info.esxi_host }}"
    username: "{{ physical_esxi_info.esxi_username }}"
    password: "{{ physical_esxi_info.esxi_password }}"
    validate_certs: false
    name: "{{ nested_info.name }}"
    state: poweredon
    guest_id: "vmkernel8Guest"
    datacenter: "ha-datacenter"
    folder: '/vm'
    disk:
      - size_gb: 40
        type: thin
        datastore: Datastore1
        unit_number: 0
        disk_mode: 'persistent'
        controller_type: 'paravirtual'
        controller_number: 0
      - size_gb: 1024
        type: thin
        datastore: Datastore1
        unit_number: 1
        disk_mode: 'persistent'
        controller_type: 'paravirtual'
        controller_number: 0
      - size_gb: 40
        type: thin
        datastore: Datastore1
        unit_number: 2
        disk_mode: 'persistent'
        controller_type: 'paravirtual'
        controller_number: 0
    hardware:
      nested_virt: true
      memory_mb: "75000"
      num_cpus: "8"
    networks: "{{ networklist }}"
    cdrom:
      - controller_number: 0
        unit_number: 0
        type: iso
        iso_path: "[Datastore1] ISOs/{{ nested_info.name }}.iso"
        state: present
  delegate_to: localhost

- name: Cleanup local files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  delegate_to: localhost
  loop:
    - "/tmp/isoextract/"
    - "/tmp/isofinished/"